@using RpgNotes.Desktop.Shared.Layouts
@using RpgNotes.Desktop.Shared.Popups
@using System.IO
@page "/home"
@page "/home/{DirectoryRef}"

@* 
    This page handles file browsing, file editing (through iframes to various editors), and changing settings
*@

@* Main Sidebars *@
<div id="ActivityBar" class="w3-sidebar w3-bar-block header" style="width: 48px;">
    <button title="Explorer" class="w3-bar-item w3-button w3-large @(tab == Tab.Explorer ? "error" : string.Empty)" style="padding: 8px; text-align: center" @onclick=@(() => tab = Tab.Explorer)>
        <img src="static/images/folder.svg" style="width: 32px; height: 32px;">
    </button>
    <button title="Graph" class="w3-bar-item w3-button w3-large @(tab == Tab.Graph ? "error" : string.Empty)" style="padding: 8px; text-align: center" @onclick=@(() => openGraphView())>
        <img src="static/images/graph.svg" style="width: 32px; height: 32px;">
    </button>
    <button title="Atlas" class="w3-bar-item w3-button w3-large @(tab == Tab.Atlas ? "error" : string.Empty)" style="padding: 8px; text-align: center" @onclick=@(() => tab = Tab.Atlas)>
        <img src="static/images/map.svg" style="width: 32px; height: 32px;">
    </button>
    <button title="Calendar" class="w3-bar-item w3-button w3-large @(tab == Tab.Calendar ? "error" : string.Empty)" style="padding: 8px; text-align: center" @onclick=@(() => tab = Tab.Calendar)>
        <img src="static/images/calendar.svg" style="width: 32px; height: 32px;">
    </button>
    <button title="Collections" class="w3-bar-item w3-button w3-large @(tab == Tab.Collections ? "error" : string.Empty)" style="padding: 8px; text-align: center" @onclick=@(() => tab = Tab.Collections)>
        <img src="static/images/collections.svg" style="width: 32px; height: 32px;">
    </button>
    <div style="position: absolute; bottom: 0;">
        <button title="Settings" class="w3-bar-item w3-button w3-large" style="padding: 8px; text-align: center" @onclick=@(() => settingsPopup?.Open())>
            <img src="static/images/gear.svg" style="width: 32px; height: 32px;">
        </button>
    </div>
</div>
<div id="Explorer" class="w3-sidebar w3-bar-block w3-padding panel" style="margin-left: 48px; width:25%; height: 100vh;">
    @if (tab == Tab.Explorer) {
        <DirectoryExplorer Directory=@this.Directory OnRightClick=OpenFileContext OnFileDbClick=@((file) => openLeft(file))></DirectoryExplorer>
    }
    @if (tab == Tab.Atlas) {
        <MapExplorer Directory=@this.Directory OnRightClick=OpenMapContext OnFileDbClick=@((file) => openMapLeft(file))></MapExplorer>
    }
    @if (tab == Tab.Calendar) {
        <CalendarExplorer Directory=@this.Directory OnRightClick=OpenCalendarContext OnFileDbClick=OpenCalendar></CalendarExplorer>
    }
    @if (tab == Tab.Collections) {
        <CollectionExplorer @ref=collectionsExplorer Directory=@this.Directory OnFileDbClick=@((article) => openLeft(article.File)) OnCollectionRightClick=openCollectionGroupContext OnArticleRightClick=openCollectionArticleContext></CollectionExplorer>
    }
</div>
@* Secondary Sidebar *@
<main id="Main" style="height:100vh; margin-left: calc(48px + 25%);" >
    <div class="w3-row" style="height: 100%;">
        <div class="w3-col @((rightTabs != null && rightTabs.Tabs > 0) ? "s6" : "s12")" style="height: 100%;">
            <TabbedPages @ref=leftTabs></TabbedPages>
        </div>
        <div class="w3-col s6 w3-leftbar @((rightTabs != null && rightTabs.Tabs > 0) ? "w3-show" : "w3-hide")" style="height: 100%;">
            <TabbedPages @ref=rightTabs></TabbedPages>
        </div>
    </div>
</main>

<AppSettings @ref=settingsPopup></AppSettings>

<DeletePopup @ref=deletePopup></DeletePopup>

@* File Explorer *@
<CreateNew @ref=create>
</CreateNew>
<RenamePopup @ref=rename>
</RenamePopup>
<ContextMenu T=FileSystemInfo @ref=fileContext>
    <ul class="w3-ul">
        @if (context is FileInfo file) {
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => openLeft(file))>Open</li>
                <li class="button" @onclick=@(() => openRight(file))>Open to the Side</li>
            </ul>
        </li>
        }
        @if (context is DirectoryInfo dir) {
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => createFileInDir(dir))>New Article</li>
                <li class="button" @onclick=@(() => createFileInDirWithTimestamp(dir))>New Timestamped Article</li>
                <li class="button" @onclick=@(() => createSubdirInDir(dir))>New Folder</li>
            </ul>
        </li>
        }
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => reveal(context))>Reveal in File Explorer</li>
            </ul>
        </li>
        <li>
            <ul class="w3-ul no-lines">
                <li class="button">Copy</li>
                <li class="button" @onclick=@(() => rename.Rename(context))>Rename</li>
                <li class="button" @onclick=@(() => delete(context))>Delete</li>
            </ul>
        </li>
    </ul>
</ContextMenu>

@* Atlas *@
<ContextMenu T=Map @ref=mapContext>
    <ul class="w3-ul">
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => openMapLeft(context))>Open</li>
                <li class="button" @onclick=@(() => openMapRight(context))>Open to the Side</li>
            </ul>
        </li>
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => rename.Rename(context.SourceFile))>Rename</li>
                <li class="button" @onclick=@(() => delete(context.SourceFile))>Delete</li>
            </ul>
        </li>
    </ul>
</ContextMenu>

@* Calendar *@
<ContextMenu T=Schedule @ref=calendarContext>
     <ul class="w3-ul">
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => openScheduleLeft(context))>Open</li>
                <li class="button" @onclick=@(() => openScheduleRight(context))>Open to the Side</li>
            </ul>
        </li>
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => rename.Rename(context.SourceFile))>Rename</li>
                <li class="button" @onclick=@(() => delete(context.SourceFile))>Delete</li>
            </ul>
        </li>
    </ul>
</ContextMenu>

@* Collections *@
<ContextMenu T=Collection @ref=collectionContext>
    <ul class="w3-ul">
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => editCollection(context))>Modify</li>
            </ul>
        </li>
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => rename.Rename(context.SourceFile))>Rename</li>
                <li class="button" @onclick=@(() => delete(context.SourceFile))>Delete</li>
            </ul>
        </li>
    </ul>
</ContextMenu>
<ContextMenu T=Article @ref=collectionArticleContext>
    <ul class="w3-ul">
        <li>
            <ul class="w3-ul no-lines">
                <li class="button" @onclick=@(() => rename.Rename(context.File))>Rename</li>
                <li class="button" @onclick=@(() => delete(context.File))>Delete</li>
            </ul>
        </li>
    </ul>
</ContextMenu>

@code {
    [Parameter] public string DirectoryRef {get; set;}
    private string Directory;

    protected override void OnParametersSet() {
        base.OnParametersSet();

        if (!string.IsNullOrEmpty(DirectoryRef)) {
            var dir = DirectoryRef.DecodeBase64();
            if (System.IO.Directory.Exists(dir))
                this.Directory = dir;
        }
    }

    protected override void OnInitialized() {
        if (Directory == null) {
            Directory = System.Environment.CurrentDirectory;
        }
    }

    private AppSettings settingsPopup;

    enum Tab {
        Explorer, Graph, Atlas, Calendar, Collections
    }
    private Tab tab;

    #region File Explorer
    private ContextMenu<FileSystemInfo> fileContext;
    private RenamePopup rename;
    private CreateNew create;
    public void OpenFileContext(MouseEventArgs args, FileSystemInfo fsObj) {
        fileContext.Open(args.ClientX, args.ClientY, fsObj);
    }
    private void createFileInDir(DirectoryInfo parent) {
        var baseFilename = "New File";
        var filename = baseFilename;
        var index = 0;
        var files = parent.GetFiles().Select(file => file.Name).Concat(parent.GetDirectories().Select(dir => dir.Name)).ToList();
        while (files.Contains(filename + ".md")) {
            filename = baseFilename + " " + (++index);
        }
        create?.Open(parent, filename);
    }
    private void createFileInDirWithTimestamp(DirectoryInfo parent) {
        var now = DateTime.Now;
        var baseFilename = now.ToString("yyyy-MM-dd H.mm.ss");
        var filename = baseFilename;
        var index = 0;
        var files = parent.GetFiles().Select(file => file.Name).Concat(parent.GetDirectories().Select(dir => dir.Name)).ToList();
        while (files.Contains(filename + ".md")) {
            filename = baseFilename + " " + (++index);
        }
        var filePath = Path.Combine(parent.FullName, filename + ".md");
        var file = new FileInfo(filePath);
        using (var writer = new StreamWriter(file.FullName)) {
            writer.WriteLine("---");
            writer.WriteLine("timestamp: " + baseFilename);
            writer.WriteLine("---");
        }
        rename.Rename(file);
    }
    private void createSubdirInDir(DirectoryInfo parent) {
        var baseFilename = "New Folder";
        var filename = baseFilename;
        var index = 0;
        var files = parent.GetFiles().Select(file => file.Name).Concat(parent.GetDirectories().Select(dir => dir.Name)).ToList();
        while (files.Contains(filename)) {
            filename = baseFilename + (++index);
        }
        var dirPath = Path.Combine(parent.FullName, filename);
        var dir = new DirectoryInfo(dirPath);
        dir.Create();
        rename.Rename(dir);
    }
    private void reveal(FileSystemInfo fs) {
        if (System.Environment.OSVersion.Platform == PlatformID.Win32NT) {
            System.Diagnostics.Process.Start("explorer.exe", "/select, " + fs.FullName);
        } else {
            System.Diagnostics.Process.Start("mimeopen", Path.GetDirectoryName(fs.FullName));
        }
    }


    private DeletePopup deletePopup;
    private void delete(FileSystemInfo fs) {
        if (fs != null)
            deletePopup?.Delete(
                Path.GetFileNameWithoutExtension(fs.Name), 
                () => {
                    fs.Delete();
                    StateHasChanged();
                }
            );
    }

    private TabbedPages leftTabs;
    private TabbedPages rightTabs;

    private void openLeft(FileInfo file) {
        this.open(file, this.leftTabs);
    }
    private void openRight(FileInfo file) {
        this.open(file, this.rightTabs);
    }
    private void open(FileInfo file, TabbedPages section) {
        if (file.IsMarkdown()) {
            section.AddPage(
                new PageInfo(
                    home: this.DirectoryRef,
                    editor: "editors/render",
                    path: file.FullName
                )
            );
        }
        if (file.IsJson()) {
            section.AddPage(
                new PageInfo(
                    home: this.DirectoryRef,
                    editor: "editors/edit",
                    path: file.FullName
                )
            );
        }
        if (file.IsImage()) {
            section.AddPage(
                new PageInfo(
                    home: this.DirectoryRef,
                    editor: "editors/image",
                    path: file.FullName
                )
            );
        }
    }
    #endregion

    #region Graph
    private void openGraphView() {
        this.leftTabs.AddPage(
            new PageInfo(
                home: this.DirectoryRef,
                editor: "editors/graph",
                path: null,
                title: Path.GetFileName(this.Directory)
            )
        );
    }
    #endregion

    #region Atlas
    private ContextMenu<Map> mapContext;
    public void OpenMapContext(MouseEventArgs args, Map cal) {
        mapContext?.Open(args.ClientX, args.ClientY, cal);
    }
    private void openMapLeft(Map map) => openMap(map, leftTabs);
    private void openMapRight(Map map) => openMap(map, rightTabs);
    private void openMap(Map map, TabbedPages pages) {
        if(map.SourceFile != null) {
            pages.AddPage(
                new PageInfo(
                    home: this.DirectoryRef,
                    editor: "editors/map",
                    path: map.SourceFile.FullName
                )
            );
        }
    }
    #endregion

    #region  Calendar
    private ContextMenu<Schedule> calendarContext;
    public void OpenCalendarContext(MouseEventArgs args, Schedule cal) {
        calendarContext?.Open(args.ClientX, args.ClientY, cal);
    }
    public void OpenCalendar(Schedule calendar) {
        openSchedule(calendar, this.leftTabs);
        StateHasChanged();
    }
    private void openScheduleLeft(Schedule s) => openSchedule(s, leftTabs);
    private void openScheduleRight(Schedule s) => openSchedule(s, rightTabs);
    private void openSchedule(Schedule calendar, TabbedPages pages) {
        if(calendar.SourceFile != null) {
            pages.AddPage(
                new PageInfo(
                    home: this.DirectoryRef,
                    editor: "editors/schedule",
                    path: calendar.SourceFile.FullName
                )
            );
        }
    }
    #endregion

    #region Collections
    private CollectionExplorer collectionsExplorer;
    private ContextMenu<Collection> collectionContext;
    private void openCollectionGroupContext(MouseEventArgs args, Collection collection) {
        collectionContext?.Open(args.ClientX, args.ClientY, collection);
    }
    private void editCollection(Collection collection) {
        if (collection != null) {
            collectionsExplorer?.Edit(collection);
        }
    }
    private ContextMenu<Article> collectionArticleContext;
    private void openCollectionArticleContext(MouseEventArgs args, Article article) {
        collectionArticleContext?.Open(args.ClientX, args.ClientY, article);
    }
    #endregion
}