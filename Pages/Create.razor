@page "/create"
@using RpgNotes.Desktop.Shared.Layouts
@using Shared.Input
@inject FileManager files;
@inject NavigationManager nav;

<Navigator></Navigator>

@if (world != null) {
<TabPanel>
    <TabPage Title="Name">
        <div class="w3-padding">
            <div class="w3-row">
                <div class="w3-col w3-right" style="width: 54px;">
                    <button class="w3-button" @onclick=@(() => showRandomNameGenerators = !showRandomNameGenerators)>
                        <img src="static/images/random.svg" height=24>
                    </button>
                </div>
                <div class="w3-rest">
                    <input @bind=createWithName>
                </div>
            </div>
            @if (showRandomNameGenerators) {
            <RandomNameGenerator OnGetName=@((name) => { createWithName = name; StateHasChanged(); })></RandomNameGenerator>
            }
        </div>
    </TabPage>
</TabPanel>

<TabPanel>
    <TabPage Title="Templates">
        <GridList T=IArticleTemplate LargeLayout=Layout.TwelveColumns MediumLayout=Layout.SixColumns SmallLayout=Layout.TwoColumns Items=Home.LoadedTemplates>
            <div class="w3-padding">
                <div class="w3-border w3-round-large w3-center @(context == this.selectedTemplate ? "error" : "well")" @onclick=@(() => selectChangeTemplate(context))>
                    <img src="@context.TemplateIcon().GetUrl()" style="width:100%; height:auto;">
                    @context.TemplateName()
                </div>
            </div>
        </GridList>
    </TabPage>
    <TabPage Title="Custom">
        <div class="w3-padding">
        <div class="w3-border-bottom w3-margin-bottom">
            Details
        </div>
        <div class="w3-padding">
            @if (article.CustomDetails != null) {
                @if (article.CustomDetails.Count > 0) {
                <div class="w3-row w3-padding">
                    <div class="w3-half">
                        Title
                    </div>
                    <div class="w3-half">
                        Type
                    </div>
                </div>
                }
                foreach (var detail in article.CustomDetails) {
                    var current = detail;
                    <div class="w3-row w3-padding">
                        <div class="w3-half w3-padding">
                            <input placeholder="Title" class="w3-input" @bind=@current.Name>
                        </div>
                        <div class="w3-half w3-padding">
                            <select placeholder="Type" class="w3-select" @bind=@current.Type>
                                @foreach (var option in Enum.GetValues<Data.Custom.FieldType>()) {
                                    <option>@option</option>
                                }
                            </select>
                        </div>
                    </div>
                }
            }
            <div class="w3-padding w3-right-align">
                <button class="w3-button bright" @onclick=removeDetail>-</button>
                <button class="w3-button bright" @onclick=addDetail>+</button>
            </div>
        </div>
        <div class="w3-border-bottom w3-margin-bottom">
            Features
        </div>
        <div class="w3-padding">
            <div class="w3-row" style="padding-bottom:2px;">
                <div class="w3-col m9 w3-padding">
                    Aricles can have an associated map on which other articles can be placed using location based connections. 
                </div>
                <div class="w3-col m3">
                    <button class="w3-button w3-block @(article.IsMapCapable() ? "error" : "bright")" @onclick=changeMapMode>
                        @if(article.IsMapCapable()) {
                            <span>Disable</span>
                        } else {
                            <span>Enable</span>
                        }
                        Map
                    </button>
                </div>
            </div>
            <div class="w3-row" style="padding-bottom:2px;">
                <div class="w3-col m9 w3-padding">
                    Aricles can have an associated character sheet on which to display gameplay stats. 
                </div>
                <div class="w3-col m3">
                    <button class="w3-button w3-block @(article.HasCharacterSheet() ? "error" : "bright")" @onclick=changeCharacterSheetMode>
                        @if(article.HasCharacterSheet()) {
                            <span>Disable</span>
                        } else {
                            <span>Enable</span>
                        }
                        Character Sheet
                    </button>
                </div>
            </div>
        </div>     
        </div>
    </TabPage>
</TabPanel>

<TabPanel>
    <TabPage Title="Description">
        <div class="w3-padding">
            <RpgNotes.Desktop.Shared.Input.EditMarkdown 
                @ref=newArticleEditor 
                AllowEdit=true 
                SpawnEditable=true
                Getter=@(() => createWithDescription) 
                Setter=@((text) => createWithDescription=text)>
            </RpgNotes.Desktop.Shared.Input.EditMarkdown>
        </div>
    </TabPage>
</TabPanel>

<div class="w3-padding">
    <div class="panel w3-padding w3-center">
        <button class="w3-button ok" @onclick=save>Save</button>
    </div>
</div>
}

@code {
    private World world;
    private EditMarkdown newArticleEditor;
    private Article article;
    
    protected override void OnInitialized() {
        this.world = files.Data();
        this.article = new Article();
        newArticleEditor?.Edit();
    }

    private string createWithName;
    private bool showRandomNameGenerators = false;
    private string createWithDescription;
    private IArticleTemplate selectedTemplate;

    private void selectChangeTemplate(IArticleTemplate template) {
        if (world == null || template == null)
            return;

        this.article = template?.Create(world.System);
        this.selectedTemplate = template;
    }
    private void markNoTemplate() {
        this.selectedTemplate = null;
    }

    private void changeMapMode() {
        if (article == null)    
            return;
        if (article.IsMapCapable()) {
            article.Map = null;
        } else {
            article.Map = new Map{};
        }
        markNoTemplate();
    }
    private void changeCharacterSheetMode() {
        if (article == null || world == null)    
            return;
        if (article.HasCharacterSheet()) {
            article.CharacterSheet = null;
        } else {
            article.CharacterSheet = world.System.CharacterSheetTemplate?.Clone();
        }
        markNoTemplate();
    }

    private void removeDetail() {
        if (article == null)
            return;

        if (article.CustomDetails != null && article.CustomDetails.Count > 0) {
            article.CustomDetails.RemoveAt(article.CustomDetails.Count - 1);
            markNoTemplate();
        }
    }

    private void addDetail() {
        if (article == null)
            return;
        
        if (article.CustomDetails == null) {
            article.CustomDetails = new List<Data.Custom.MetadataField>();
        }

        article.CustomDetails.Add(new Data.Custom.MetadataField());
        markNoTemplate();
    }

    private void save() {
        if (world == null || article == null)
            return;

        this.article.Name = createWithName;
        this.article.MarkdownContent = createWithDescription;

        world.Articles.Add(this.article);
        nav.Article(this.article);
    }
}