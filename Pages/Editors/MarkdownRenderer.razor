@page "/home/{HomeRef}/editors/render/{FileRef}"
@inherits EditorBase;
@inject NavigationManager nav;
@using System.Collections
@using System.IO
@using System.Text.RegularExpressions
@using System.Text.Json

@if (Exists) {
<Header>
<button title="edit" class="w3-button w3-bar-item" style="float: right;" @onclick=edit><img src="static/images/edit.svg" height=20></button>
</Header>
@if (sidebar == null || !sidebar.isVisible) {
<button class="w3-button header" style="position: fixed; right:  0; top: 52px; border-radius: 25% 0 0 25%; " @onclick=showInfo>
    <img src="static/images/info.svg" height=20>
</button>
} 
<Sidebar @ref=sidebar OnClose=hideInfo>
    <div style="margin-top: 48px;"></div>
    <div class="w3-container">
        <h3>Metadata</h3>
        <hr>
        @if (metadata != null) {
            @foreach (var kv in metadata) {
                <MetadataRenderer Field=@kv></MetadataRenderer>
            }
        }
    </div>
</Sidebar>
<article class="w3-container" style="padding-top: 40px;">
    @((MarkupString)rendered)
</article>
} else {
<Error>
    File '@(File)' does not exist.
</Error>
}

@code {
    private DateTime textFetchedAtTime;
    public string text;
    public bool FileHasChanged => Exists && File.LastWriteTime > textFetchedAtTime;
    private Sidebar sidebar;
    private Dictionary<string,object> metadata;

    private string rendered;

    protected override void OnParametersSet () {
        base.OnParametersSet ();
        reloadText();
        renderMarkdown();
    }

    private void edit() {
        this.nav.NavigateTo(new PageInfo(
            home: this.HomeDirectory,
            editor: "editors/edit",
            file: File
        ).Url);
    }

    private void reloadText() {
        if (Exists) {
            this.textFetchedAtTime = DateTime.Now;
            var article = new Article(this.File);
            this.metadata = article.FrontMatter();
            text = article.AutoLinkedContents(this.HomeDirectory);
        }
    }

    private void renderMarkdown() {
        if (this.text != null)
        this.rendered = md.Transform(this.text);
    }

    private void showInfo() {
        this.sidebar?.SetVisibility(true);
    }

    private void hideInfo() {
        // this.sidebar?.SetVisibility(false);
    }

    private static MarkdownSharp.Markdown md = new MarkdownSharp.Markdown(
        new MarkdownSharp.MarkdownOptions {
            
        }
    );
}