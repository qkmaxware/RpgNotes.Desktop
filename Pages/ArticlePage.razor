@inject FileManager files
@inject NavigationManager nav
@inject IJSRuntime js
@inject Notifier notify
@page "/article/{guid}"
@using RpgNotes.Desktop.Shared.Input
@using RpgNotes.Desktop.Shared.Layouts
@using RpgNotes.Desktop.Shared.Popups
@using RpgNotes.Desktop.Shared.Renderers

<Navigator>
    @*<button class="w3-button" @onclick=shareUrl>
        <img src="static/images/link.svg" width=20>
    </button>*@
</Navigator>

@if (article == null) {
<div class="w3-center w3-padding">No article with id @guid</div>
} else {
<div class="w3-row">
    @* The Information Panel *@
    <div class="w3-col l3 m6 w3-right">
        <TabPanel BonusActions=infoPanelActions>
            <TabPage TitleFunc=@getArticleName>
                @if (article.ProfileImage() != null) {
                <div class="w3-padding w3-center">
                    <img src=@(article.ProfileImage().GetUrl()) style="width: auto; max-width: 100%; max-height: 320px; margin-left: auto; margin-right: auto;">
                </div>
                }
                <div class="w3-row">
                    @if (article.HasMap()) {
                        <button class="w3-button w3-col m6" @onclick=gotoMap>
                            <img src="static/images/map.svg"> View Map
                        </button>
                    }
                    @if (defaultPosition != null) {
                        <button class="w3-button w3-col m6" @onclick=gotoDefaultLocation>
                            <img src="static/images/markers/gps.svg"> Location
                        </button>
                    }
                </div>
                <Section Title=Details>
                    <Content>
                        <EditText Label="Name" AllowEdit=true Getter=@(() => article.Name) Setter=@((name) => { article.Name = name; StateHasChanged();})/>
                        @if (article.CustomDetails != null) {
                            foreach (var field in article.CustomDetails) {
                                <MetadataFieldRenderer Field=field></MetadataFieldRenderer>
                            }
                        }
                    </Content>
                </Section>
                @if (article.CustomDataBlocks != null) {
                    foreach (var block in article.CustomDataBlocks) {
                        <Section Title=@block.Name>
                            <Content>
                                @if (block.Data != null) {
                                    foreach (var field in block.Data) {
                                        <MetadataFieldRenderer Field=field></MetadataFieldRenderer>
                                    }
                                }
                            </Content>
                        </Section>
                    }
                }
                <Section Title=Notes>
                    <Content>
                        <EditMultiline AllowEdit=true Getter=@(() => article.Notes) Setter=@((notes) => article.Notes = notes)/>
                    </Content>
                </Section>
                <Section Title=Images>
                    <Bar>
                        <button class="w3-button" style="padding:6px;" @onclick=openInternetImageAdder>
                            <img src="static/images/image.www.svg" style="width: auto; height: 30px;">
                        </button>
                        <button class="w3-button" style="padding:6px;" @onclick=openLocalImageAdder>
                            <img src="static/images/image.file.svg" style="width: auto; height: 30px;">
                        </button>
                    </Bar>
                    <Content>
                        @if (article.Images != null) {
                            foreach (var img in article.Images) {
                                <div style="display: inline-block; padding: 4px;">
                                    <div class="w3-display-container field" style="width: 128px; height:128px; background-image: url(@img.GetUrl()); background-repeat: no-repeat; background-size: contain;">
                                        <div class="w3-display-topright w3-bar-block edit">
                                            <a class="w3-button w3-bar-item" target="_blank" href="@img.GetUrl()">
                                                <img src="static/images/view.svg" width=20>
                                            </a>
                                            @if (article.IsMapCapable()) {
                                                <button class="w3-button w3-bar-item" @onclick=@(() => makeImageMap(img))>
                                                    <img src="static/images/map.svg" width=20>
                                                </button>
                                            }
                                            <button class="w3-button w3-bar-item" @onclick=@(() => deleteImage(img))>
                                                <img src="static/images/delete.svg" width=20>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </Content>
                </Section>
            </TabPage>
            <TabPage Title="Connections">
                <div class="w3-padding">
                    <button class="w3-button w3-block ok" @onclick=openConnectionBuilder>Add Connection</button>
                </div>
                @if (cachedConnections != null) {
                    foreach (var conn in cachedConnections) {
                        <ConnectionRenderer Connection=conn OwnerGuid=@this.guid OnDelete=@(() => { cachedConnections.Remove(conn); StateHasChanged(); })></ConnectionRenderer>
                    }
                }
            </TabPage>
        </TabPanel>
    </div>
    @* The Text Panel *@
    <div class="w3-col l9 m6">
        <TabPanel>
            <TabPage Title="Content">
                <div class="w3-padding" style="overflow-x: hidden;">
                    <EditMarkdown AllowEdit=true AvailableImages=@article.Images Getter=@(() => article.MarkdownContent) Setter=@((content) => article.MarkdownContent = content)></EditMarkdown>
                </div>
            </TabPage>
            @if (article.IsCampaign()) {
            <TabPage Title="Session Reports">
                <div class="w3-padding">
                    <div class="w3-right-align">
                        <div class="w3-dropdown-click" style="float: none;">
                            <button class="w3-button w3-round well" @onclick=@(() => showReportOptions = !showReportOptions)>+ Report &#x25BE;</button>
                            <div class="w3-dropdown-content w3-bar-block w3-card-4 well @showReportOptionsCss" style="right:0;">
                                @foreach (var report in this.sessionTemplates) {
                                    <button class="w3-button w3-bar-item well" @onclick=@(() => newSessionReport(report))>@report.Key</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @if (article.Campaign.SessionReports != null) {
                    <Timeline Items=@(article.Campaign.SessionReports.OrderByDescending(r => r.PlayDate))>
                        <div class="timeline-markdown">
                            <strong>@context.PlayDate.ToString("f")</strong>
                            <RenderMarkdown Text=@context.Content></RenderMarkdown>
                        </div>
                    </Timeline>
                }
            </TabPage>
            }
            @if (article.CharacterSheet != null) {
            <TabPage Title="Character Sheet">
                <CharacterSheetRenderer Sheet=article.CharacterSheet></CharacterSheetRenderer>
            </TabPage>
            }
            @if (this.familyTree != null && this.familyTree.Count > 0) {
            <TabPage Title="Ancestry">
                @for (var i = 0; i < this.familyTree.Count; i++) {
                    var row = this.familyTree[i];
                    var title = i == 0 ? "Parents" : (i == 1 ? "Grandparents" : (String.Concat(Enumerable.Repeat("Great ", i - 1)) + "Grandparents"));
                    @if (row.Count > 0) {
                        <div class="w3-center">
                            <strong>@title</strong>
                            <div style="white-space: nowrap; overflow-x: auto;">
                                @foreach (var person in row) {
                                    <button class="w3-button" @onclick=@(() => nav.Article(person))>@person.Name</button>
                                }
                            </div>
                        </div>
                    }
                }
            </TabPage>
            }
        </TabPanel>
        <TabPanel>
            <TabPage Title="Tags">
                <div class="w3-padding">
                    <EditTags AllowEdit=true Tags=@article.Tags></EditTags>
                </div>
            </TabPage>
        </TabPanel>
    </div>
</div>

<ConnectionBuilderPopup @ref="connectionBuilder" OnAdd=addConnection></ConnectionBuilderPopup>
<ReferenceUrlImagePopup @ref="internetImage" OnAdd=onAddImage></ReferenceUrlImagePopup>
<LocalFileImagePopup @ref="localImage" OnAdd=onAddImage></LocalFileImagePopup>
<Modal Title="Delete Image" Visible=showDeletePopup OnClose=@(() => { showDeletePopup = false; StateHasChanged(); })>
    <div class="w3-padding">
        <p>
            Are you sure you want to delete this image?
        </p>
        <div class="w3-row">
            <div class="w3-col s6">
                <button class="w3-button error" @onclick=@(() => showDeletePopup = false)>Cancel</button>
            </div>
            <div class="w3-col s6 w3-right-align">
                <button class="w3-button ok" @onclick=@(() => deleteNow())>Confirm</button>
            </div>
        </div>
    </div>
</Modal>
<Modal Title="Set Map Image" Visible=showMapPopup OnClose=@(() => { showMapPopup = false; StateHasChanged(); })>
    <div class="w3-padding">
        <p>
        Are you sure you want to use this image as a map for this entity? Any exisiting map will be lost!
        </p>
        <div class="w3-row">
            <div class="w3-col s6">
                <button class="w3-button error" @onclick=@(() => showMapPopup = false)>Cancel</button>
            </div>
            <div class="w3-col s6 w3-right-align">
                <button class="w3-button ok" @onclick=@(() => setMapNow())>Confirm</button>
            </div>
        </div>
    </div>
</Modal>
<Modal Title="New Report" Visible=showNewSessionReport OnClose=@(() => { showNewSessionReport = false; StateHasChanged(); })>
    <div class="w3-padding">
        <EditMarkdown @ref=sessionReportEditor AllowEdit=true AvailableImages=@(article.Images) Getter=@(() => reportString) Setter=@((text) => reportString=text)>
        </EditMarkdown>
        <div class="w3-padding w3-center">
            <button class="w3-button ok" @onclick=saveSessionReport>Add</button>
        </div>
    </div>
</Modal>
}

@code {
    [Parameter] public string guid {get; set;}

    private World world;
    private Article article;
    private List<Connection> cachedConnections; // makes it faster to iterate over when need be
    private Connection defaultPosition;
    private List<TabAction> infoPanelActions;
    protected override void OnParametersSet () {
        base.OnParametersSet();
        this.world = files.Data();
        this.infoPanelActions = new List<TabAction> {
            new TabAction{
                IconUrl = "static/images/gear.svg",
                Callback= gotoSettings
            }
        };
        if (this.world != null) {
            this.article = this.world.Articles[guid];
            if (this.article != null) {
                if (article.Tags == null) {
                    article.Tags = new List<string>();
                }
                this.cachedConnections = this.world.Articles.GetConnectionsForArticle(this.article).ToList();
                this.defaultPosition = this.cachedConnections.Where(conn => conn.MapPosition != null && conn.GetParticipantGuid(conn.MapOwner) != guid).FirstOrDefault();
                reComputeFamilyTree();
            }
        }
    }

    private string getArticleName() {
        if (article != null) {
            return article.Name;
        } else {
            return "Article";
        }
    }

    private async void shareUrl() {
        var url = nav.Uri;
        await js.InvokeVoidAsync("RpgNotes.CopyToClipboard", url);
        notify.Alert("Link copied to clipboard");
    }

    private ConnectionBuilderPopup connectionBuilder;
    private void openConnectionBuilder() {
        connectionBuilder?.Open(this.article);
    }
    private void addConnection(Connection connection) {
        world.Articles.Connect(connection);
        this.cachedConnections.Add(connection);
        if (connection.FamilialParent != Participant.None)
            reComputeFamilyTree();
        if (files != null)
            files.MarkDirty();
        StateHasChanged();
    }

    private ReferenceUrlImagePopup internetImage;
    private LocalFileImagePopup localImage;
    private void openInternetImageAdder() {
        internetImage?.Open();
    }
    private void openLocalImageAdder() {
        localImage?.Open();
    }
    private void onAddImage(Image image) {
        if (this.article.Images == null)
            this.article.Images = new List<Image>();
        this.article.Images.Add(image);
        StateHasChanged();
    }
    private bool showDeletePopup = false;
    private Image toDelete;
    private void deleteImage(Image image) {
        showDeletePopup = true;
        toDelete = image;
    }
    private void deleteNow() {
        if (this.article.Images != null && toDelete != null)
            this.article.Images.Remove(toDelete);
        toDelete = null;
        showDeletePopup = false;
    }

    private bool showMapPopup = false;
    private Image nextMapImage;
    private void makeImageMap(Image image) {
        showMapPopup = true;
        nextMapImage = image;
    }
    private void setMapNow() {
        if (nextMapImage == null)
            return;
        
        if (this.article.IsMapCapable()) {
            if (this.article.Map == null) {
                this.article.Map = new Map();
            }
            this.article.Map.Background = nextMapImage;
        }

        showMapPopup = false;
        nextMapImage = null;
    }
    private void gotoMap() {
        if (article != null && article.HasMap()) {
            nav.Map(article);
        }
    }
    private void gotoDefaultLocation() {
        if (defaultPosition != null && defaultPosition.MapPosition != null) {
            var mapGuid = defaultPosition.GetParticipantGuid(defaultPosition.MapOwner);
            if (mapGuid != null) {
                nav.Map(mapGuid, defaultPosition.MapPosition.X, defaultPosition.MapPosition.Y);
            }
        }
    }

    private void gotoSettings() {
        if (this.article != null) {
            nav.Settings(this.article);
        }
    }

    List<List<Article>> familyTree = new List<List<Article>>();
    private void reComputeFamilyTree() {
        if (article == null || world == null)
            return;
        
        List<List<string>> family = new List<List<string>>();
        HashSet<string> alreadyVisited = new HashSet<string>();
        // Get parent
        var parents = this.cachedConnections.Where(conn => conn.HasAncestrySupport() && conn.GetParticipantGuid(conn.FamilialParent) != guid).Select(x => x.GetParticipantGuid(x.FamilialParent)).ToList();
        if (parents == null || parents.Count < 1)
            return;

        // Recursively get parents of parents
        while (parents.Count > 0) {
            family.Add(parents);
            foreach (var parent in parents) {
                alreadyVisited.Add(parent);
            }

            parents = parents.SelectMany(
                guid => world.Articles.GetConnectionsForArticle(guid)
                .Where(conn => 
                    !alreadyVisited.Contains(conn.GetParticipantGuid(conn.FamilialParent)) // Not already visited (prevents loops)
                    && conn.HasAncestrySupport()                                           // Is ancestry link
                    && conn.GetParticipantGuid(conn.FamilialParent) != guid)               // Where this article is the child
                .Select(conn => conn.GetParticipantGuid(conn.FamilialParent))
            ).ToList();
        }
        this.familyTree = family.Select(row => row.Select(guid => this.world.Articles[guid]).Where(art => art != null).ToList()).ToList();
    }

    private bool showReportOptions = false;
    private string showReportOptionsCss => showReportOptions ? "w3-show" : "w3-hide";
    private Dictionary<string, Func<SessionReportTemplate>> sessionTemplates = new Dictionary<string, Func<SessionReportTemplate>> {
        { "Generic Report", () => new GenericSessionReport() },  
        { "Battle Report", () => new SessionBattleReport() },  
        { "Item Found", () => new ItemAquiredReport() },
        { "Important Event", () => new ImportantEventReport() },
    };
    private bool showNewSessionReport = false;
    private string reportString;
    private EditMarkdown sessionReportEditor;
    private void newSessionReport(KeyValuePair<string, Func<SessionReportTemplate>> constructor) {
        reportString = constructor.Value().ToMarkdown();
        sessionReportEditor?.Edit();
        showNewSessionReport = true;
        showReportOptions = false;
    }
    private void saveSessionReport() {
        if (article != null && article.Campaign != null) {
            if (article.Campaign.SessionReports == null) {
                article.Campaign.SessionReports = new List<SessionReport>();
            }

            var report = new SessionReport {
                PlayDate = DateTime.Now,
                Content = reportString
            };
            article.Campaign.SessionReports.Add(report);
            reportString = null;
        }

        showNewSessionReport = false;
        StateHasChanged();
    }
}