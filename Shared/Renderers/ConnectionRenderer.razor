@using RpgNotes.Desktop.Pages
@inject FileManager files
@inject NavigationManager nav;

<div class="w3-padding">
    <div class="w3-padding w3-round-xlarge">
        @Connection.FormatRelationship(this.OwnerGuid) @otherName
        @* Connection Actions Below *@
        <div class="w3-row">
            <div class="w3-col s6">
                <span class="w3-button" @onclick=gotoOtherMember>
                    <img src="static/images/link.svg" width=20 height=20>
                </span>
                @if (Connection.HasLocationSupport()) {
                    <span class="w3-button" @onclick=gotoMap>
                        <img src="static/images/markers/gps_white.svg" width=20 height=20>
                    </span>
                }
            </div>
            <div class="w3-col s6 w3-right-align">
                <span class="w3-button" @onclick=deleteConnection>&times;</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Connection Connection {get; set;}
    [Parameter] public string OwnerGuid {get; set;}
    [Parameter] public Action OnDelete {get; set;}
    private string otherName;
    private World world;

    protected override void OnInitialized() {
        base.OnInitialized();
        this.world = files.Data();
        if (world != null) {
            var otherGuid = Connection.ParticipatesWith(this.OwnerGuid);
            var otherArticle = world.Articles[otherGuid];
            this.otherName = otherArticle?.Name ?? otherGuid;
        }
    }

    private void gotoMap() {
        var mapGuid = Connection.GetParticipantGuid(Connection.MapOwner);
        // TODO check that the other connection actually has a map, don't just assume
        if (mapGuid != null) {
            if (Connection.MapPosition == null) {
                Connection.MapPosition = new Position {
                    Marker = "static/images/markers/gps.svg",
                    X = 0,
                    Y = 0,
                };
                nav.RelocateOnMap(mapGuid, Connection);
            } else {
                nav.Map(mapGuid, Connection.MapPosition.X, Connection.MapPosition.Y);
            }
        }
    }

    private void gotoOtherMember() {
        var otherGuid = Connection.ParticipatesWith(this.OwnerGuid);
        if (otherGuid != null) {
            nav.Article(otherGuid);
        }
    }

    private void deleteConnection() {
        if (world != null) {
            world.Articles.Disconnect(this.Connection);
            OnDelete?.Invoke();
        }
    }
}