@inject FileManager files;
@inject IJSRuntime js;

<div class="field" style="width: 100%; min-height: 128px;">
<label>@Label</label>
<div class="w3-display-container">
    @if(isDisabled) {
        <RenderMarkdown Text=@text></RenderMarkdown>
        <div class="w3-display-topright edit">
         @if (AllowEdit) {
            <img src="static/images/edit.svg" style="width:24px; padding-top:8px;" @onclick=@(() => isDisabled = !isDisabled)>
        }
        </div>
    } else {
        <div class="w3-right-align edit">
            @if (AllowEdit) {
                <img src="static/images/edit.svg" style="width:24px; padding-top:8px;" @onclick=@(() => isDisabled = !isDisabled)>
            }
        </div>
        <div class="w3-bar header">
            <button class="w3-button w3-bar-item" @onclick=@(() => makeHeader(1))>H<sub>1</sub></button>
            <button class="w3-button w3-bar-item" @onclick=@(() => makeHeader(2))>H<sub>2</sub></button>
            <button class="w3-button w3-bar-item" @onclick=@(() => makeHeader(3))>H<sub>3</sub></button>
            <span   class="w3-bar-item error-text">|</span>
            <button class="w3-button w3-bar-item" @onclick=makeBold><strong>B</strong></button>
            <button class="w3-button w3-bar-item" @onclick=makeItalics><i>i</i></button>
            <button class="w3-button w3-bar-item" @onclick=makeUnderline><span style="text-decoration: underline">U</span></button>
            <button class="w3-button w3-bar-item" @onclick=makeStrike><s>O</s></button>
            <button class="w3-button w3-bar-item" @onclick=makeSuper>x<sup>2</sup></button>
            <button class="w3-button w3-bar-item" @onclick=makeSub>x<sub>2</sub></button>
            <span   class="w3-bar-item error-text">|</span>
            <button title="blockquote" class="w3-button w3-bar-item" @onclick=makeQuote>"</button>
            <button title="unordered list" class="w3-button w3-bar-item" @onclick=addUl><img src="static/images/unorderedList.svg" height=20></button>
            <button title="ordered list" class="w3-button w3-bar-item" @onclick=addOl><img src="static/images/orderedList.svg" height=20></button>
            <span   class="w3-bar-item error-text">|</span>
            <div class="w3-dropdown-click" style="float: none;">
                <button title="link to article" class="w3-button" @onclick=showAddLink><img src="static/images/link.svg" height=20></button>
                <div class="w3-dropdown-content w3-bar-block w3-card-4 w3-padding well @addLinkDropdownCss">
                    <input list="editor-article-list" @bind="linkFilter" placeholder="article name">
                    <datalist id="editor-article-list">
                        @if (linksShowing && files.HasLoadedSavefile()) {
                            var data = files.Data();
                            if (data != null) {
                                foreach (var article in data.Articles.EnumerateArticles()) {
                                    <option>@article.Name</option>
                                }
                            }
                        }
                    </datalist>
                    <div class="w3-center w3-padding">
                        <button class="w3-button ok" @onclick=addLink>Add</button>
                    </div>
                </div>
            </div>
            @if (AvailableImages != null && AvailableImages.Count > 0) {
            <div class="w3-dropdown-click" style="float: none;">
                <button title="images" class="w3-button" @onclick=showAddPicture><img src="static/images/picture.svg" height=20></button>
                <div class="w3-dropdown-content w3-bar-block w3-card-4 w3-padding well @addPictureDropdownCss">
                    <div>
                        @if (picsShowing) {
                            @foreach (var img in this.AvailableImages) {
                                <img src="@img.GetUrl()" style="max-height: 64px; max-width: 64px;" @onclick=@(() => addPicture(img))>
                            }
                        }
                    </div>
                </div>
            </div>
            }
        </div>
        <textarea @ref=editElement @bind=text style="height: 50vh;"></textarea>
    }
    
</div>
</div>

@code {
    [Parameter] public string Label {get; set;}
    [Parameter] public bool AllowEdit {get; set;} = false;
    [Parameter] public Func<string> Getter {get; set;}
    [Parameter] public Action<string> Setter {get; set;}

    private bool isDisabled = true;
    private string text {
        get => Getter?.Invoke();
        set {
            Setter?.Invoke(value);
            files.MarkDirty();
            StateHasChanged();
        }
    }

    public void Edit() {
        if (this.AllowEdit) {
            this.isDisabled = false;
            StateHasChanged();
        }
    }

    private ElementReference editElement;
    private async Task<Range> GetSelection() {
        
        int start = await js.InvokeAsync<int>("RpgNotes.GetSelectionStart", editElement);
        int end   = await js.InvokeAsync<int>("RpgNotes.GetSelectionEnd", editElement);

        return new Range(
            new Index(start, false),
            new Index(end, false)
        );
    }

    private async Task insertAtSelectionStart(string insertion) {
        var text = this.text;
        if (text == null)
            return;
        if (text.Length == 0) {
            this.text = insertion;
            return;
        }

        var selection = await GetSelection();
        var startAt = selection.Start.GetOffset(text.Length);

        this.text = text.Substring(0, startAt) + insertion + text.Substring(startAt);
    }

    private async Task surroundSelection(string begin, string end, bool failIfEmpty = true) {
        var text = this.text;
        if (string.IsNullOrEmpty(text)) {
            if (!failIfEmpty) {
                this.text = begin + end;
            }
            return;
        }

        var selection = await GetSelection();
        var startAt = selection.Start.GetOffset(text.Length);
        var endAt = selection.End.GetOffset(text.Length);
        
        if (failIfEmpty && startAt == endAt)
            return;

        this.text = text.Substring(0, startAt) + begin + text.Substring(startAt, endAt - startAt) + end + text.Substring(endAt);
    }

    private async void makeBold() {
        await surroundSelection("**", "**");
    }

    private async void makeItalics() {
        await surroundSelection("*", "*");
    }

    private async void makeUnderline() {
        await surroundSelection("<u>", "</u>");    
    }

    private async void makeStrike() {
        await surroundSelection("<s>", "</s>");  
    }

    private async void makeSuper() {
        await surroundSelection("<sup>", "</sup>");
    }

    private async void makeSub() {
        await surroundSelection("<sub>", "</sub>");
    }

    private async void makeHeader(int depth) {
        await surroundSelection(new string('#', depth) + " ", string.Empty, failIfEmpty: false);
    }

    private async void makeQuote() {
        await surroundSelection("> ", string.Empty, failIfEmpty: false);
    }

    private async void addUl() {
        await insertAtSelectionStart(
@"- First Item
- Second Item
- Third Item"
        );
    }
    private async void addOl() {
        await insertAtSelectionStart(
@"1. First Item
2. Second Item
3. Third Item"
        );
    }

    private bool linksShowing = false;
    private string linkFilter;
    private string addLinkDropdownCss => linksShowing ? "w3-show" : "w3-hide";
    private void showAddLink() {
        linksShowing = !linksShowing;
        linkFilter = null;
    }
    private async void addLink() {
        var data = files.Data();
        if (data == null)
            return;
        var article = data.Articles.EnumerateArticles().FirstOrDefault(x => x.Name == linkFilter);
        if (article == null)
            return;
            
        await insertAtSelectionStart($"[{article.Name}](article/{article.Guid})");
        linksShowing = false;
        StateHasChanged();
    }


    [Parameter] public List<Image> AvailableImages {get; set;}
    private bool picsShowing = false;
    private string addPictureDropdownCss => picsShowing ? "w3-show" : "w3-hide";
    private void showAddPicture() {
        picsShowing = !picsShowing;
    }
    private async void addPicture(Image img) {
        if (img == null)
            return;

        picsShowing = false;
        await insertAtSelectionStart($"![]({img.GetUrl()})");
    }

}