@using System.Timers
@implements IDisposable
@inject Notifier notify

<div class="w3-center" style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 24;">
    <div class="w3-round-xlarge w3-display-container w3-center w3-animate-bottom bright @css" style="width: 640px; max-width: 80%; margin-left: auto; margin-right: auto; margin-bottom: 14px;">
        <div style="padding: 15px; 32px;">
            @text
        </div>
        <span class="w3-padding w3-display-topright w3-hover-opacity" @onclick=dismiss>&times;</span>
    </div>
</div>

@code {
    private string text;
    private bool visible;
    private string css => visible ? "w3-show" : "w3-hide";
    private Timer timer = new Timer(TimeSpan.FromSeconds(30).TotalMilliseconds);

    protected override void OnInitialized() {
        base.OnInitialized();
        timer.Elapsed += (sender, e) => dismiss();
        // Subscribe to notify events
        notify.OnNotificationReceived += push;
    }

    void IDisposable.Dispose(){
        // Unsubscribe from the event when our component is disposed
        notify.OnNotificationReceived -= push;
    }

    private void push(string message) {
        visible = true;
        text = message;

        // reset the timer
        timer.Stop();
        timer.Start();

        StateHasChanged();
    }

    private void dismiss() {
        visible = false;
        InvokeAsync(StateHasChanged);
    }
}