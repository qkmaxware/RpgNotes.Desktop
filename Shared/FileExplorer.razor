@using Qkmaxware.Blazor.FileExplorer.Data
@using RpgNotes.Desktop.Shared.Layouts
@using Qkmaxware.Blazor.FileExplorer.Components
@using System.Text.RegularExpressions
@inject FileManager fs

<Qkmaxware.Blazor.FileExplorer.Components.FileExplorer StartingDirectory=@stardir Title="" AllowEdit=@Save Filters=filters ConfirmationText=@confirmText OnConfirm=triggerOnFileSelected OnCancel=triggerOnCancelled>
</Qkmaxware.Blazor.FileExplorer.Components.FileExplorer>

@code {
    private string stardir;
    [Parameter] public bool Save {get; set;}
    [Parameter] public bool Load {
        get => !Save;
        set => Save = !value;
    }
    private string confirmText => Save ? "Save File" : "Load File";
    [Parameter] public Action<string> OnFileSelected {get; set;}
    private void triggerOnFileSelected(string path) => OnFileSelected?.Invoke(path);
    [Parameter] public Action OnCancelled {get; set;}
    private void triggerOnCancelled() => OnCancelled?.Invoke();
    [Parameter] public string Patterns {get; set;}

    private FilenameFilter[] filters;

    protected override void OnInitialized() {
        var filters = new List<FilenameFilter>();
        if (string.IsNullOrEmpty(Patterns)) {
            filters.Add(FilenameFilter.Any());
        } else {
            var exts = Patterns.Split(',');
            if (exts.Length > 1)
                filters.Add(FilenameFilter.Extension("any", exts));
            foreach (var ext in exts) {
                filters.Add(FilenameFilter.Extension(ext + " file", ext));
            }
        }
        this.filters = filters.ToArray();

        if (fs != null) {
            this.stardir = fs.AppDataPath;
        }
    }

}